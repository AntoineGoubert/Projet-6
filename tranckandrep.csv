,Unnamed: 0.15,Unnamed: 0.14,Unnamed: 0.13,Unnamed: 0.12,Unnamed: 0.11,Unnamed: 0.10,Unnamed: 0.9,Unnamed: 0.8,Unnamed: 0.7,Unnamed: 0.6,Unnamed: 0.5,Unnamed: 0.4,Unnamed: 0.3,Unnamed: 0.2,Unnamed: 0.1,Unnamed: 0,index,level_0,Model,Image Filtering,Parametres+Layers,Act Func,Trainset Ids,Testset Ids,Metric,Results,Calc Time
0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,<keras.engine.sequential.Sequential object at 0x000001AB2BEA7100>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([ 986,   91, 1967, 1937,  838, 2253, 3352, 1669, 2023, 3598,
            ...
            1571, 3649, 3752, 2827, 2047, 1518,  358, 2599, 2940,   26],
           dtype='int64', length=3427)","Int64Index([1451, 1854, 3216,  302, 1334, 3433, 1628, 2487,  188, 3285,
            ...
            2465,  977,  804, 2783,  697, 3473, 2332, 2764,  598, 3422],
           dtype='int64', length=381)",Accuracy,,2841.862532377243s
1,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,1.0,<keras.engine.sequential.Sequential object at 0x000001AABBA8A110>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 986,   91, 1967, 1937,  838, 2253, 3352, 1669, 2023, 3598,
            ...
            1571, 3649, 3752, 2827, 2047, 1518,  358, 2599, 2940,   26],
           dtype='int64', length=3427)","Int64Index([1451, 1854, 3216,  302, 1334, 3433, 1628, 2487,  188, 3285,
            ...
            2465,  977,  804, 2783,  697, 3473, 2332, 2764,  598, 3422],
           dtype='int64', length=381)",Accuracy,,1986.0128922462463s
2,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,2.0,<keras.engine.sequential.Sequential object at 0x000001AABC66E080>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer='adam', metrics=['accuracy'])",relu,"Int64Index([ 986,   91, 1967, 1937,  838, 2253, 3352, 1669, 2023, 3598,
            ...
            1571, 3649, 3752, 2827, 2047, 1518,  358, 2599, 2940,   26],
           dtype='int64', length=3427)","Int64Index([1451, 1854, 3216,  302, 1334, 3433, 1628, 2487,  188, 3285,
            ...
            2465,  977,  804, 2783,  697, 3473, 2332, 2764,  598, 3422],
           dtype='int64', length=381)",Accuracy,,1942.208612203598s
3,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,3.0,<keras.engine.sequential.Sequential object at 0x000001AABBB97130>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 986,   91, 1967, 1937,  838, 2253, 3352, 1669, 2023, 3598,
            ...
            1571, 3649, 3752, 2827, 2047, 1518,  358, 2599, 2940,   26],
           dtype='int64', length=3427)","Int64Index([1451, 1854, 3216,  302, 1334, 3433, 1628, 2487,  188, 3285,
            ...
            2465,  977,  804, 2783,  697, 3473, 2332, 2764,  598, 3422],
           dtype='int64', length=381)",Accuracy,,780.8254556655884s
4,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,4.0,<keras.engine.sequential.Sequential object at 0x000001AAE54B4700>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([ 986,   91, 1967, 1937,  838, 2253, 3352, 1669, 2023, 3598,
            ...
            1571, 3649, 3752, 2827, 2047, 1518,  358, 2599, 2940,   26],
           dtype='int64', length=3427)","Int64Index([1451, 1854, 3216,  302, 1334, 3433, 1628, 2487,  188, 3285,
            ...
            2465,  977,  804, 2783,  697, 3473, 2332, 2764,  598, 3422],
           dtype='int64', length=381)",Accuracy,,780.8254556655884s
5,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,5.0,<keras.engine.sequential.Sequential object at 0x000001AB25648790>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([ 752, 2990,  908, 3255, 2530, 2252,  247, 1320, 3242, 3025,
            ...
             664,   23,  882, 3081, 2195, 1124, 2098,  400,  332,  180],
           dtype='int64', length=3427)","Int64Index([2054,  732, 3481, 3183, 2797,  718, 1743,  912, 1847, 1784,
            ...
            2556, 2233,  905, 1603, 1332, 3110, 2617,  993, 3205, 2082],
           dtype='int64', length=381)",Accuracy,0.2257217913866043,587.0s
6,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,6.0,<keras.engine.sequential.Sequential object at 0x000001AB3F6A5C90>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 752, 2990,  908, 3255, 2530, 2252,  247, 1320, 3242, 3025,
            ...
             664,   23,  882, 3081, 2195, 1124, 2098,  400,  332,  180],
           dtype='int64', length=3427)","Int64Index([2054,  732, 3481, 3183, 2797,  718, 1743,  912, 1847, 1784,
            ...
            2556, 2233,  905, 1603, 1332, 3110, 2617,  993, 3205, 2082],
           dtype='int64', length=381)",Accuracy,0.2257217913866043,1085.0s
7,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,7.0,<keras.engine.sequential.Sequential object at 0x000001AB246836D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer='adam', metrics=['accuracy'])",relu,"Int64Index([ 752, 2990,  908, 3255, 2530, 2252,  247, 1320, 3242, 3025,
            ...
             664,   23,  882, 3081, 2195, 1124, 2098,  400,  332,  180],
           dtype='int64', length=3427)","Int64Index([2054,  732, 3481, 3183, 2797,  718, 1743,  912, 1847, 1784,
            ...
            2556, 2233,  905, 1603, 1332, 3110, 2617,  993, 3205, 2082],
           dtype='int64', length=381)",Accuracy,0.2257217913866043,921.0s
8,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,8.0,<keras.engine.sequential.Sequential object at 0x000001AB246836D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 752, 2990,  908, 3255, 2530, 2252,  247, 1320, 3242, 3025,
            ...
             664,   23,  882, 3081, 2195, 1124, 2098,  400,  332,  180],
           dtype='int64', length=3427)","Int64Index([2054,  732, 3481, 3183, 2797,  718, 1743,  912, 1847, 1784,
            ...
            2556, 2233,  905, 1603, 1332, 3110, 2617,  993, 3205, 2082],
           dtype='int64', length=381)",Accuracy,0.3595800399780273,364.0s
9,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,9.0,<keras.engine.sequential.Sequential object at 0x000001F43F7AB3A0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([2917,  229, 2052,  918, 2061, 1603, 2576, 2601, 2946, 1776,
            ...
             815, 3129, 1292, 3165,  633, 3592,  382,  316,  159, 1041],
           dtype='int64', length=3427)","Int64Index([1309, 1271,   63,  247, 1664,  972, 2456, 2149, 1346, 3222,
            ...
            3636, 3557,  501, 1962,  879, 1491, 3671,   92, 3183, 3725],
           dtype='int64', length=381)",Accuracy,0.251968502998352,350.0s
10,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,10.0,<keras.engine.sequential.Sequential object at 0x000001F43304A380>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2917,  229, 2052,  918, 2061, 1603, 2576, 2601, 2946, 1776,
            ...
             815, 3129, 1292, 3165,  633, 3592,  382,  316,  159, 1041],
           dtype='int64', length=3427)","Int64Index([1309, 1271,   63,  247, 1664,  972, 2456, 2149, 1346, 3222,
            ...
            3636, 3557,  501, 1962,  879, 1491, 3671,   92, 3183, 3725],
           dtype='int64', length=381)",Accuracy,0.251968502998352,860.0s
11,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,11.0,<keras.engine.sequential.Sequential object at 0x000001F43F1B4340>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2917,  229, 2052,  918, 2061, 1603, 2576, 2601, 2946, 1776,
            ...
             815, 3129, 1292, 3165,  633, 3592,  382,  316,  159, 1041],
           dtype='int64', length=3427)","Int64Index([1309, 1271,   63,  247, 1664,  972, 2456, 2149, 1346, 3222,
            ...
            3636, 3557,  501, 1962,  879, 1491, 3671,   92, 3183, 3725],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,868.0s
12,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,12.0,<keras.engine.sequential.Sequential object at 0x000001F43F0C4610>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2917,  229, 2052,  918, 2061, 1603, 2576, 2601, 2946, 1776,
            ...
             815, 3129, 1292, 3165,  633, 3592,  382,  316,  159, 1041],
           dtype='int64', length=3427)","Int64Index([1309, 1271,   63,  247, 1664,  972, 2456, 2149, 1346, 3222,
            ...
            3636, 3557,  501, 1962,  879, 1491, 3671,   92, 3183, 3725],
           dtype='int64', length=381)",Accuracy,0.251968502998352,152.0s
13,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,13.0,<keras.engine.sequential.Sequential object at 0x000001F43F823760>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2917,  229, 2052,  918, 2061, 1603, 2576, 2601, 2946, 1776,
            ...
             815, 3129, 1292, 3165,  633, 3592,  382,  316,  159, 1041],
           dtype='int64', length=3427)","Int64Index([1309, 1271,   63,  247, 1664,  972, 2456, 2149, 1346, 3222,
            ...
            3636, 3557,  501, 1962,  879, 1491, 3671,   92, 3183, 3725],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,260.0s
14,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,14.0,<keras.engine.sequential.Sequential object at 0x000002268874B790>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([1746, 1802, 3428,  946,  995,  633, 1756, 2446, 1779,  762,
            ...
            1856, 1338, 2371,  371, 3584,  329, 2502, 1921,  319, 2298],
           dtype='int64', length=3427)","Int64Index([ 566, 2889, 3804, 2440, 3247, 3058, 1013, 2817, 3490, 1125,
            ...
            3643, 2141,  601, 2432, 3237, 3446, 2428, 1877, 1914, 3397],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,20.0s
15,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,15.0,<keras.engine.sequential.Sequential object at 0x00000226773DBA30>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1746, 1802, 3428,  946,  995,  633, 1756, 2446, 1779,  762,
            ...
            1856, 1338, 2371,  371, 3584,  329, 2502, 1921,  319, 2298],
           dtype='int64', length=3427)","Int64Index([ 566, 2889, 3804, 2440, 3247, 3058, 1013, 2817, 3490, 1125,
            ...
            3643, 2141,  601, 2432, 3237, 3446, 2428, 1877, 1914, 3397],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,19.0s
16,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,16.0,<keras.engine.sequential.Sequential object at 0x0000022688406320>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1746, 1802, 3428,  946,  995,  633, 1756, 2446, 1779,  762,
            ...
            1856, 1338, 2371,  371, 3584,  329, 2502, 1921,  319, 2298],
           dtype='int64', length=3427)","Int64Index([ 566, 2889, 3804, 2440, 3247, 3058, 1013, 2817, 3490, 1125,
            ...
            3643, 2141,  601, 2432, 3237, 3446, 2428, 1877, 1914, 3397],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,19.0s
17,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,17.0,<keras.engine.sequential.Sequential object at 0x0000022688405C90>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1746, 1802, 3428,  946,  995,  633, 1756, 2446, 1779,  762,
            ...
            1856, 1338, 2371,  371, 3584,  329, 2502, 1921,  319, 2298],
           dtype='int64', length=3427)","Int64Index([ 566, 2889, 3804, 2440, 3247, 3058, 1013, 2817, 3490, 1125,
            ...
            3643, 2141,  601, 2432, 3237, 3446, 2428, 1877, 1914, 3397],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,5.0s
18,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,18.0,<keras.engine.sequential.Sequential object at 0x0000022696F11CC0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1746, 1802, 3428,  946,  995,  633, 1756, 2446, 1779,  762,
            ...
            1856, 1338, 2371,  371, 3584,  329, 2502, 1921,  319, 2298],
           dtype='int64', length=3427)","Int64Index([ 566, 2889, 3804, 2440, 3247, 3058, 1013, 2817, 3490, 1125,
            ...
            3643, 2141,  601, 2432, 3237, 3446, 2428, 1877, 1914, 3397],
           dtype='int64', length=381)",Accuracy,0.317585289478302,15.0s
19,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,19.0,<keras.engine.sequential.Sequential object at 0x00000226E80210F0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([2098, 1268,  508, 3370, 2326, 1244, 2328,  522, 1016,  715,
            ...
            1382, 2701, 2741, 2199, 1261,   88, 3671, 2622, 2550, 3707],
           dtype='int64', length=3427)","Int64Index([  19,  459,  528, 1126, 1585, 3409, 2494, 2538, 3058, 1677,
            ...
            3444, 3531, 2693,  323, 3030, 1965, 3506, 3315, 3124, 2684],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,16.0s
20,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,20.0,<keras.engine.sequential.Sequential object at 0x00000226E7FFAE90>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2098, 1268,  508, 3370, 2326, 1244, 2328,  522, 1016,  715,
            ...
            1382, 2701, 2741, 2199, 1261,   88, 3671, 2622, 2550, 3707],
           dtype='int64', length=3427)","Int64Index([  19,  459,  528, 1126, 1585, 3409, 2494, 2538, 3058, 1677,
            ...
            3444, 3531, 2693,  323, 3030, 1965, 3506, 3315, 3124, 2684],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,19.0s
21,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,21.0,<keras.engine.sequential.Sequential object at 0x00000226E6022E30>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2098, 1268,  508, 3370, 2326, 1244, 2328,  522, 1016,  715,
            ...
            1382, 2701, 2741, 2199, 1261,   88, 3671, 2622, 2550, 3707],
           dtype='int64', length=3427)","Int64Index([  19,  459,  528, 1126, 1585, 3409, 2494, 2538, 3058, 1677,
            ...
            3444, 3531, 2693,  323, 3030, 1965, 3506, 3315, 3124, 2684],
           dtype='int64', length=381)",Accuracy,0.3517060279846191,18.0s
22,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,22.0,<keras.engine.sequential.Sequential object at 0x00000226886E1DE0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2098, 1268,  508, 3370, 2326, 1244, 2328,  522, 1016,  715,
            ...
            1382, 2701, 2741, 2199, 1261,   88, 3671, 2622, 2550, 3707],
           dtype='int64', length=3427)","Int64Index([  19,  459,  528, 1126, 1585, 3409, 2494, 2538, 3058, 1677,
            ...
            3444, 3531, 2693,  323, 3030, 1965, 3506, 3315, 3124, 2684],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,12.0s
23,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,23.0,<keras.engine.sequential.Sequential object at 0x00000226E5F2E5F0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2098, 1268,  508, 3370, 2326, 1244, 2328,  522, 1016,  715,
            ...
            1382, 2701, 2741, 2199, 1261,   88, 3671, 2622, 2550, 3707],
           dtype='int64', length=3427)","Int64Index([  19,  459,  528, 1126, 1585, 3409, 2494, 2538, 3058, 1677,
            ...
            3444, 3531, 2693,  323, 3030, 1965, 3506, 3315, 3124, 2684],
           dtype='int64', length=381)",Accuracy,0.3018372654914856,12.0s
24,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,24.0,<keras.engine.sequential.Sequential object at 0x00000226E67A88B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([2216, 3362, 3027, 2034,  986, 1733, 2164,  692, 1434, 1339,
            ...
            2202, 1433, 2750, 3000,  901, 3586,  785,  420, 1106,  402],
           dtype='int64', length=3427)","Int64Index([  43,  972, 3654,  572, 1229,  929,  606, 1396,  140, 3219,
            ...
             456, 1015, 2868, 1668, 2019, 2186, 1477, 2879, 1505,  122],
           dtype='int64', length=381)",Accuracy,0.2913385927677154,74.0s
25,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,25.0,<keras.engine.sequential.Sequential object at 0x00000226773A9630>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2216, 3362, 3027, 2034,  986, 1733, 2164,  692, 1434, 1339,
            ...
            2202, 1433, 2750, 3000,  901, 3586,  785,  420, 1106,  402],
           dtype='int64', length=3427)","Int64Index([  43,  972, 3654,  572, 1229,  929,  606, 1396,  140, 3219,
            ...
             456, 1015, 2868, 1668, 2019, 2186, 1477, 2879, 1505,  122],
           dtype='int64', length=381)",Accuracy,0.2913385927677154,90.0s
26,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,26.0,<keras.engine.sequential.Sequential object at 0x00000226773AAF20>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2216, 3362, 3027, 2034,  986, 1733, 2164,  692, 1434, 1339,
            ...
            2202, 1433, 2750, 3000,  901, 3586,  785,  420, 1106,  402],
           dtype='int64', length=3427)","Int64Index([  43,  972, 3654,  572, 1229,  929,  606, 1396,  140, 3219,
            ...
             456, 1015, 2868, 1668, 2019, 2186, 1477, 2879, 1505,  122],
           dtype='int64', length=381)",Accuracy,0.3044619560241699,89.0s
27,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,27.0,<keras.engine.sequential.Sequential object at 0x00000226E6273D90>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2216, 3362, 3027, 2034,  986, 1733, 2164,  692, 1434, 1339,
            ...
            2202, 1433, 2750, 3000,  901, 3586,  785,  420, 1106,  402],
           dtype='int64', length=3427)","Int64Index([  43,  972, 3654,  572, 1229,  929,  606, 1396,  140, 3219,
            ...
             456, 1015, 2868, 1668, 2019, 2186, 1477, 2879, 1505,  122],
           dtype='int64', length=381)",Accuracy,0.2913385927677154,20.0s
28,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,28.0,<keras.engine.sequential.Sequential object at 0x00000226E6270310>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2216, 3362, 3027, 2034,  986, 1733, 2164,  692, 1434, 1339,
            ...
            2202, 1433, 2750, 3000,  901, 3586,  785,  420, 1106,  402],
           dtype='int64', length=3427)","Int64Index([  43,  972, 3654,  572, 1229,  929,  606, 1396,  140, 3219,
            ...
             456, 1015, 2868, 1668, 2019, 2186, 1477, 2879, 1505,  122],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,11.0s
29,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,29.0,<keras.engine.sequential.Sequential object at 0x0000028C9C6D91B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([3016, 1873, 1975, 1364, 3733, 3658, 2710,  301,  605, 3458,
            ...
            1111,  997, 1390, 2223,  166,  521, 3036, 3032, 2680, 1565],
           dtype='int64', length=3427)","Int64Index([3230, 2852, 1029,  282,  779, 3463, 1917,  712, 1485,  587,
            ...
            1755,  154, 2708, 2419, 2415,  177, 3234,  120,  185, 1473],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,34.0s
30,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,30.0,<keras.engine.sequential.Sequential object at 0x0000028C9C74A6B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3016, 1873, 1975, 1364, 3733, 3658, 2710,  301,  605, 3458,
            ...
            1111,  997, 1390, 2223,  166,  521, 3036, 3032, 2680, 1565],
           dtype='int64', length=3427)","Int64Index([3230, 2852, 1029,  282,  779, 3463, 1917,  712, 1485,  587,
            ...
            1755,  154, 2708, 2419, 2415,  177, 3234,  120,  185, 1473],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,38.0s
31,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,31.0,<keras.engine.sequential.Sequential object at 0x0000028C9C2F91B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3016, 1873, 1975, 1364, 3733, 3658, 2710,  301,  605, 3458,
            ...
            1111,  997, 1390, 2223,  166,  521, 3036, 3032, 2680, 1565],
           dtype='int64', length=3427)","Int64Index([3230, 2852, 1029,  282,  779, 3463, 1917,  712, 1485,  587,
            ...
            1755,  154, 2708, 2419, 2415,  177, 3234,  120,  185, 1473],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,37.0s
32,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,32.0,<keras.engine.sequential.Sequential object at 0x0000028C9C2F9A50>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3016, 1873, 1975, 1364, 3733, 3658, 2710,  301,  605, 3458,
            ...
            1111,  997, 1390, 2223,  166,  521, 3036, 3032, 2680, 1565],
           dtype='int64', length=3427)","Int64Index([3230, 2852, 1029,  282,  779, 3463, 1917,  712, 1485,  587,
            ...
            1755,  154, 2708, 2419, 2415,  177, 3234,  120,  185, 1473],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,19.0s
33,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,33.0,<keras.engine.sequential.Sequential object at 0x0000028E409DF1C0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3016, 1873, 1975, 1364, 3733, 3658, 2710,  301,  605, 3458,
            ...
            1111,  997, 1390, 2223,  166,  521, 3036, 3032, 2680, 1565],
           dtype='int64', length=3427)","Int64Index([3230, 2852, 1029,  282,  779, 3463, 1917,  712, 1485,  587,
            ...
            1755,  154, 2708, 2419, 2415,  177, 3234,  120,  185, 1473],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,11.0s
34,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,34.0,<keras.engine.sequential.Sequential object at 0x0000028E2D64B130>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([1400, 1957, 3765, 3267,  102, 3431, 3046,  859,  318, 1329,
            ...
            3673,   75,   21, 1905, 2943, 3530, 2057, 2939, 3643,  388],
           dtype='int64', length=3427)","Int64Index([ 772, 3337, 1893,  158, 2056, 2443, 2981, 2421, 3702,  103,
            ...
             436,  475, 2876, 1751, 1408, 2414, 2388,  619, 1383, 1711],
           dtype='int64', length=381)",Accuracy,0.3648293912410736,30.0s
35,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,35.0,<keras.engine.sequential.Sequential object at 0x0000028E2A81A260>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1400, 1957, 3765, 3267,  102, 3431, 3046,  859,  318, 1329,
            ...
            3673,   75,   21, 1905, 2943, 3530, 2057, 2939, 3643,  388],
           dtype='int64', length=3427)","Int64Index([ 772, 3337, 1893,  158, 2056, 2443, 2981, 2421, 3702,  103,
            ...
             436,  475, 2876, 1751, 1408, 2414, 2388,  619, 1383, 1711],
           dtype='int64', length=381)",Accuracy,0.3648293912410736,37.0s
36,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,36.0,<keras.engine.sequential.Sequential object at 0x0000028E2A687610>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1400, 1957, 3765, 3267,  102, 3431, 3046,  859,  318, 1329,
            ...
            3673,   75,   21, 1905, 2943, 3530, 2057, 2939, 3643,  388],
           dtype='int64', length=3427)","Int64Index([ 772, 3337, 1893,  158, 2056, 2443, 2981, 2421, 3702,  103,
            ...
             436,  475, 2876, 1751, 1408, 2414, 2388,  619, 1383, 1711],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,37.0s
37,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,37.0,<keras.engine.sequential.Sequential object at 0x0000028E2A843BE0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1400, 1957, 3765, 3267,  102, 3431, 3046,  859,  318, 1329,
            ...
            3673,   75,   21, 1905, 2943, 3530, 2057, 2939, 3643,  388],
           dtype='int64', length=3427)","Int64Index([ 772, 3337, 1893,  158, 2056, 2443, 2981, 2421, 3702,  103,
            ...
             436,  475, 2876, 1751, 1408, 2414, 2388,  619, 1383, 1711],
           dtype='int64', length=381)",Accuracy,0.3648293912410736,16.0s
38,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,38.0,<keras.engine.sequential.Sequential object at 0x0000028E40A48400>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1400, 1957, 3765, 3267,  102, 3431, 3046,  859,  318, 1329,
            ...
            3673,   75,   21, 1905, 2943, 3530, 2057, 2939, 3643,  388],
           dtype='int64', length=3427)","Int64Index([ 772, 3337, 1893,  158, 2056, 2443, 2981, 2421, 3702,  103,
            ...
             436,  475, 2876, 1751, 1408, 2414, 2388,  619, 1383, 1711],
           dtype='int64', length=381)",Accuracy,0.3648293912410736,17.0s
39,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,39.0,0.0,<keras.engine.sequential.Sequential object at 0x0000027484726560>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([2825, 2753, 2128, 2212,  985, 3759, 3325, 2215,  494, 3335,
            ...
            1880,  670,  649, 1056,  963, 3721,  622, 2752,  878, 2538],
           dtype='int64', length=3427)","Int64Index([ 862, 2026, 1188, 2661, 1565, 3456, 1224, 3316, 2774,  434,
            ...
            1384,  338, 2046, 2970, 1877, 1111,  452, 1237,   95, 3505],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,32.0s
40,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,40.0,0.0,<keras.engine.sequential.Sequential object at 0x0000027484727040>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2825, 2753, 2128, 2212,  985, 3759, 3325, 2215,  494, 3335,
            ...
            1880,  670,  649, 1056,  963, 3721,  622, 2752,  878, 2538],
           dtype='int64', length=3427)","Int64Index([ 862, 2026, 1188, 2661, 1565, 3456, 1224, 3316, 2774,  434,
            ...
            1384,  338, 2046, 2970, 1877, 1111,  452, 1237,   95, 3505],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,36.0s
41,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,41.0,0.0,<keras.engine.sequential.Sequential object at 0x000002763E7678E0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2825, 2753, 2128, 2212,  985, 3759, 3325, 2215,  494, 3335,
            ...
            1880,  670,  649, 1056,  963, 3721,  622, 2752,  878, 2538],
           dtype='int64', length=3427)","Int64Index([ 862, 2026, 1188, 2661, 1565, 3456, 1224, 3316, 2774,  434,
            ...
            1384,  338, 2046, 2970, 1877, 1111,  452, 1237,   95, 3505],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,36.0s
42,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,42.0,0.0,<keras.engine.sequential.Sequential object at 0x000002763FBACE50>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2825, 2753, 2128, 2212,  985, 3759, 3325, 2215,  494, 3335,
            ...
            1880,  670,  649, 1056,  963, 3721,  622, 2752,  878, 2538],
           dtype='int64', length=3427)","Int64Index([ 862, 2026, 1188, 2661, 1565, 3456, 1224, 3316, 2774,  434,
            ...
            1384,  338, 2046, 2970, 1877, 1111,  452, 1237,   95, 3505],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,22.0s
43,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,43.0,0.0,<keras.engine.sequential.Sequential object at 0x000002764246C040>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2825, 2753, 2128, 2212,  985, 3759, 3325, 2215,  494, 3335,
            ...
            1880,  670,  649, 1056,  963, 3721,  622, 2752,  878, 2538],
           dtype='int64', length=3427)","Int64Index([ 862, 2026, 1188, 2661, 1565, 3456, 1224, 3316, 2774,  434,
            ...
            1384,  338, 2046, 2970, 1877, 1111,  452, 1237,   95, 3505],
           dtype='int64', length=381)",Accuracy,0.4173228442668915,17.0s
44,44.0,44.0,44.0,44.0,44.0,44.0,44.0,44.0,44.0,44.0,44.0,44.0,44.0,44.0,0.0,,,,<keras.engine.sequential.Sequential object at 0x000002748EEB7400>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([ 325,  303, 3325, 3717, 1580, 2328, 1152, 1675, 3661, 1743,
            ...
            3653, 3253, 2383,   53, 3497, 1862, 1542, 2616, 3138, 2816],
           dtype='int64', length=3427)","Int64Index([3636, 3077,  354,  453, 1753, 2217,  941,  697,  690, 1611,
            ...
            2061,  521,  557, 1615,  784, 2133,  158, 2799, 2396, 1497],
           dtype='int64', length=381)",Accuracy,0.278215229511261,31.0s
45,45.0,45.0,45.0,45.0,45.0,45.0,45.0,45.0,45.0,45.0,45.0,45.0,45.0,45.0,0.0,,,,<keras.engine.sequential.Sequential object at 0x000002748ECFF8B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 325,  303, 3325, 3717, 1580, 2328, 1152, 1675, 3661, 1743,
            ...
            3653, 3253, 2383,   53, 3497, 1862, 1542, 2616, 3138, 2816],
           dtype='int64', length=3427)","Int64Index([3636, 3077,  354,  453, 1753, 2217,  941,  697,  690, 1611,
            ...
            2061,  521,  557, 1615,  784, 2133,  158, 2799, 2396, 1497],
           dtype='int64', length=381)",Accuracy,0.278215229511261,36.0s
46,46.0,46.0,46.0,46.0,46.0,46.0,46.0,46.0,46.0,46.0,46.0,46.0,46.0,46.0,0.0,,,,<keras.engine.sequential.Sequential object at 0x00000274B57FB8B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 325,  303, 3325, 3717, 1580, 2328, 1152, 1675, 3661, 1743,
            ...
            3653, 3253, 2383,   53, 3497, 1862, 1542, 2616, 3138, 2816],
           dtype='int64', length=3427)","Int64Index([3636, 3077,  354,  453, 1753, 2217,  941,  697,  690, 1611,
            ...
            2061,  521,  557, 1615,  784, 2133,  158, 2799, 2396, 1497],
           dtype='int64', length=381)",Accuracy,0.341207355260849,36.0s
47,47.0,47.0,47.0,47.0,47.0,47.0,47.0,47.0,47.0,47.0,47.0,47.0,47.0,47.0,0.0,,,,<keras.engine.sequential.Sequential object at 0x00000274B549E8F0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 325,  303, 3325, 3717, 1580, 2328, 1152, 1675, 3661, 1743,
            ...
            3653, 3253, 2383,   53, 3497, 1862, 1542, 2616, 3138, 2816],
           dtype='int64', length=3427)","Int64Index([3636, 3077,  354,  453, 1753, 2217,  941,  697,  690, 1611,
            ...
            2061,  521,  557, 1615,  784, 2133,  158, 2799, 2396, 1497],
           dtype='int64', length=381)",Accuracy,0.278215229511261,14.0s
48,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,48.0,0.0,,,,<keras.engine.sequential.Sequential object at 0x00000274B4B922C0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 325,  303, 3325, 3717, 1580, 2328, 1152, 1675, 3661, 1743,
            ...
            3653, 3253, 2383,   53, 3497, 1862, 1542, 2616, 3138, 2816],
           dtype='int64', length=3427)","Int64Index([3636, 3077,  354,  453, 1753, 2217,  941,  697,  690, 1611,
            ...
            2061,  521,  557, 1615,  784, 2133,  158, 2799, 2396, 1497],
           dtype='int64', length=381)",Accuracy,0.38057741522789,22.0s
49,49.0,49.0,49.0,49.0,49.0,49.0,49.0,49.0,49.0,49.0,49.0,49.0,49.0,0.0,,,,,<keras.engine.sequential.Sequential object at 0x00000274B4AE6E90>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([ 941,  538, 3623, 1045, 2065, 2032, 2404, 3078, 3661,   63,
            ...
             158, 2432,  526, 1337,  770, 2558,  289, 2553, 2212,  313],
           dtype='int64', length=3427)","Int64Index([ 750, 2363, 2373, 3175, 3392, 3241,  415, 1369, 1667, 1718,
            ...
             449,  730,  301,  537,  713,  558, 2285, 1794, 1807, 1752],
           dtype='int64', length=381)",Accuracy,0.2572178542613983,32.0s
50,50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,50.0,0.0,,,,,<keras.engine.sequential.Sequential object at 0x00000274B4AE6500>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 941,  538, 3623, 1045, 2065, 2032, 2404, 3078, 3661,   63,
            ...
             158, 2432,  526, 1337,  770, 2558,  289, 2553, 2212,  313],
           dtype='int64', length=3427)","Int64Index([ 750, 2363, 2373, 3175, 3392, 3241,  415, 1369, 1667, 1718,
            ...
             449,  730,  301,  537,  713,  558, 2285, 1794, 1807, 1752],
           dtype='int64', length=381)",Accuracy,0.2572178542613983,37.0s
51,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,51.0,0.0,,,,,<keras.engine.sequential.Sequential object at 0x00000274B4AE56C0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 941,  538, 3623, 1045, 2065, 2032, 2404, 3078, 3661,   63,
            ...
             158, 2432,  526, 1337,  770, 2558,  289, 2553, 2212,  313],
           dtype='int64', length=3427)","Int64Index([ 750, 2363, 2373, 3175, 3392, 3241,  415, 1369, 1667, 1718,
            ...
             449,  730,  301,  537,  713,  558, 2285, 1794, 1807, 1752],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,37.0s
52,52.0,52.0,52.0,52.0,52.0,52.0,52.0,52.0,52.0,52.0,52.0,52.0,52.0,0.0,,,,,<keras.engine.sequential.Sequential object at 0x000002763E17B160>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 941,  538, 3623, 1045, 2065, 2032, 2404, 3078, 3661,   63,
            ...
             158, 2432,  526, 1337,  770, 2558,  289, 2553, 2212,  313],
           dtype='int64', length=3427)","Int64Index([ 750, 2363, 2373, 3175, 3392, 3241,  415, 1369, 1667, 1718,
            ...
             449,  730,  301,  537,  713,  558, 2285, 1794, 1807, 1752],
           dtype='int64', length=381)",Accuracy,0.2572178542613983,15.0s
53,53.0,53.0,53.0,53.0,53.0,53.0,53.0,53.0,53.0,53.0,53.0,53.0,53.0,0.0,,,,,<keras.engine.sequential.Sequential object at 0x00000274C2AF3B80>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 941,  538, 3623, 1045, 2065, 2032, 2404, 3078, 3661,   63,
            ...
             158, 2432,  526, 1337,  770, 2558,  289, 2553, 2212,  313],
           dtype='int64', length=3427)","Int64Index([ 750, 2363, 2373, 3175, 3392, 3241,  415, 1369, 1667, 1718,
            ...
             449,  730,  301,  537,  713,  558, 2285, 1794, 1807, 1752],
           dtype='int64', length=381)",Accuracy,0.3963254690170288,19.0s
54,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,54.0,0.0,,,,,,<keras.engine.sequential.Sequential object at 0x00000247BF0C73D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([1275, 3734, 2223, 1988, 1462,   53, 3706,  173, 3172, 1211,
            ...
              15, 2618, 2382,  587, 2993, 1145, 2876, 1530, 3160, 3294],
           dtype='int64', length=3427)","Int64Index([3388, 3497, 2048, 2218, 2789, 1995, 3354, 3503, 1496, 2925,
            ...
             768, 1298, 2598, 3040, 1216, 3205, 1874, 1724, 3324, 2628],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,37.0s
55,55.0,55.0,55.0,55.0,55.0,55.0,55.0,55.0,55.0,55.0,55.0,55.0,0.0,,,,,,<keras.engine.sequential.Sequential object at 0x00000249BE2B3CA0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1275, 3734, 2223, 1988, 1462,   53, 3706,  173, 3172, 1211,
            ...
              15, 2618, 2382,  587, 2993, 1145, 2876, 1530, 3160, 3294],
           dtype='int64', length=3427)","Int64Index([3388, 3497, 2048, 2218, 2789, 1995, 3354, 3503, 1496, 2925,
            ...
             768, 1298, 2598, 3040, 1216, 3205, 1874, 1724, 3324, 2628],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,36.0s
56,56.0,56.0,56.0,56.0,56.0,56.0,56.0,56.0,56.0,56.0,56.0,56.0,0.0,,,,,,<keras.engine.sequential.Sequential object at 0x00000249BE6DBA90>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1275, 3734, 2223, 1988, 1462,   53, 3706,  173, 3172, 1211,
            ...
              15, 2618, 2382,  587, 2993, 1145, 2876, 1530, 3160, 3294],
           dtype='int64', length=3427)","Int64Index([3388, 3497, 2048, 2218, 2789, 1995, 3354, 3503, 1496, 2925,
            ...
             768, 1298, 2598, 3040, 1216, 3205, 1874, 1724, 3324, 2628],
           dtype='int64', length=381)",Accuracy,0.3123359680175781,36.0s
57,57.0,57.0,57.0,57.0,57.0,57.0,57.0,57.0,57.0,57.0,57.0,57.0,0.0,,,,,,<keras.engine.sequential.Sequential object at 0x00000249BE6DB4C0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1275, 3734, 2223, 1988, 1462,   53, 3706,  173, 3172, 1211,
            ...
              15, 2618, 2382,  587, 2993, 1145, 2876, 1530, 3160, 3294],
           dtype='int64', length=3427)","Int64Index([3388, 3497, 2048, 2218, 2789, 1995, 3354, 3503, 1496, 2925,
            ...
             768, 1298, 2598, 3040, 1216, 3205, 1874, 1724, 3324, 2628],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,13.0s
58,58.0,58.0,58.0,58.0,58.0,58.0,58.0,58.0,58.0,58.0,58.0,58.0,0.0,,,,,,<keras.engine.sequential.Sequential object at 0x00000249BE84D330>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1275, 3734, 2223, 1988, 1462,   53, 3706,  173, 3172, 1211,
            ...
              15, 2618, 2382,  587, 2993, 1145, 2876, 1530, 3160, 3294],
           dtype='int64', length=3427)","Int64Index([3388, 3497, 2048, 2218, 2789, 1995, 3354, 3503, 1496, 2925,
            ...
             768, 1298, 2598, 3040, 1216, 3205, 1874, 1724, 3324, 2628],
           dtype='int64', length=381)",Accuracy,0.3648293912410736,20.0s
59,59.0,59.0,59.0,59.0,59.0,59.0,59.0,59.0,59.0,59.0,59.0,0.0,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FD9636B6D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([2383, 2058, 2364, 1143,  139,    0, 2284,  893, 2339,  556,
            ...
             388, 2078, 1967, 2003, 1281,  896, 1744, 2990, 2796,  522],
           dtype='int64', length=3427)","Int64Index([2356,  357,  457, 3610, 1481,  106,  765, 3677,  208, 3370,
            ...
             105, 3503, 1164, 2269, 2110,  123, 2088, 1997, 2837, 1245],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,36.0s
60,60.0,60.0,60.0,60.0,60.0,60.0,60.0,60.0,60.0,60.0,60.0,0.0,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FD87FF24A0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2383, 2058, 2364, 1143,  139,    0, 2284,  893, 2339,  556,
            ...
             388, 2078, 1967, 2003, 1281,  896, 1744, 2990, 2796,  522],
           dtype='int64', length=3427)","Int64Index([2356,  357,  457, 3610, 1481,  106,  765, 3677,  208, 3370,
            ...
             105, 3503, 1164, 2269, 2110,  123, 2088, 1997, 2837, 1245],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,38.0s
61,61.0,61.0,61.0,61.0,61.0,61.0,61.0,61.0,61.0,61.0,61.0,0.0,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FD9602A8C0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2383, 2058, 2364, 1143,  139,    0, 2284,  893, 2339,  556,
            ...
             388, 2078, 1967, 2003, 1281,  896, 1744, 2990, 2796,  522],
           dtype='int64', length=3427)","Int64Index([2356,  357,  457, 3610, 1481,  106,  765, 3677,  208, 3370,
            ...
             105, 3503, 1164, 2269, 2110,  123, 2088, 1997, 2837, 1245],
           dtype='int64', length=381)",Accuracy,0.278215229511261,37.0s
62,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,62.0,0.0,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FD882137F0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2383, 2058, 2364, 1143,  139,    0, 2284,  893, 2339,  556,
            ...
             388, 2078, 1967, 2003, 1281,  896, 1744, 2990, 2796,  522],
           dtype='int64', length=3427)","Int64Index([2356,  357,  457, 3610, 1481,  106,  765, 3677,  208, 3370,
            ...
             105, 3503, 1164, 2269, 2110,  123, 2088, 1997, 2837, 1245],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,19.0s
63,63.0,63.0,63.0,63.0,63.0,63.0,63.0,63.0,63.0,63.0,63.0,0.0,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FD882D6680>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2383, 2058, 2364, 1143,  139,    0, 2284,  893, 2339,  556,
            ...
             388, 2078, 1967, 2003, 1281,  896, 1744, 2990, 2796,  522],
           dtype='int64', length=3427)","Int64Index([2356,  357,  457, 3610, 1481,  106,  765, 3677,  208, 3370,
            ...
             105, 3503, 1164, 2269, 2110,  123, 2088, 1997, 2837, 1245],
           dtype='int64', length=381)",Accuracy,0.3622047305107116,27.0s
64,64.0,64.0,64.0,64.0,64.0,64.0,64.0,64.0,64.0,64.0,0.0,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000026116207A60>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([1440, 2827,  556, 1751,   71, 2335, 1360, 3731,  520, 1500,
            ...
             136, 1073,  660, 1670, 3175, 1633, 3490, 1031,   85, 3372],
           dtype='int64', length=3427)","Int64Index([2918,  366, 2915, 1953, 2280,  324,  231, 3673, 3616, 1873,
            ...
              23, 3445,  630,  694,  153, 2908,  585,  169, 3603, 3004],
           dtype='int64', length=381)",Accuracy,0.3622047305107116,34.0s
65,65.0,65.0,65.0,65.0,65.0,65.0,65.0,65.0,65.0,65.0,0.0,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000260B59FB0A0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1440, 2827,  556, 1751,   71, 2335, 1360, 3731,  520, 1500,
            ...
             136, 1073,  660, 1670, 3175, 1633, 3490, 1031,   85, 3372],
           dtype='int64', length=3427)","Int64Index([2918,  366, 2915, 1953, 2280,  324,  231, 3673, 3616, 1873,
            ...
              23, 3445,  630,  694,  153, 2908,  585,  169, 3603, 3004],
           dtype='int64', length=381)",Accuracy,0.3622047305107116,39.0s
66,66.0,66.0,66.0,66.0,66.0,66.0,66.0,66.0,66.0,66.0,0.0,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000261080E76D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1440, 2827,  556, 1751,   71, 2335, 1360, 3731,  520, 1500,
            ...
             136, 1073,  660, 1670, 3175, 1633, 3490, 1031,   85, 3372],
           dtype='int64', length=3427)","Int64Index([2918,  366, 2915, 1953, 2280,  324,  231, 3673, 3616, 1873,
            ...
              23, 3445,  630,  694,  153, 2908,  585,  169, 3603, 3004],
           dtype='int64', length=381)",Accuracy,0.3070866167545318,38.0s
67,67.0,67.0,67.0,67.0,67.0,67.0,67.0,67.0,67.0,67.0,0.0,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000026108073220>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1440, 2827,  556, 1751,   71, 2335, 1360, 3731,  520, 1500,
            ...
             136, 1073,  660, 1670, 3175, 1633, 3490, 1031,   85, 3372],
           dtype='int64', length=3427)","Int64Index([2918,  366, 2915, 1953, 2280,  324,  231, 3673, 3616, 1873,
            ...
              23, 3445,  630,  694,  153, 2908,  585,  169, 3603, 3004],
           dtype='int64', length=381)",Accuracy,0.3622047305107116,15.0s
68,68.0,68.0,68.0,68.0,68.0,68.0,68.0,68.0,68.0,68.0,0.0,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000262B9FFAE60>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1440, 2827,  556, 1751,   71, 2335, 1360, 3731,  520, 1500,
            ...
             136, 1073,  660, 1670, 3175, 1633, 3490, 1031,   85, 3372],
           dtype='int64', length=3427)","Int64Index([2918,  366, 2915, 1953, 2280,  324,  231, 3673, 3616, 1873,
            ...
              23, 3445,  630,  694,  153, 2908,  585,  169, 3603, 3004],
           dtype='int64', length=381)",Accuracy,0.3832021057605743,18.0s
69,69.0,69.0,69.0,69.0,69.0,69.0,69.0,69.0,69.0,0.0,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002BC85F74EB0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([3326, 2425,  637, 3447,  157, 1464, 1762, 1488,  332, 3458,
            ...
            2319,  299,  556,  808, 2433, 2027, 1583, 3499,  800, 2600],
           dtype='int64', length=3427)","Int64Index([2608, 1641, 3164, 1784, 3268,  771, 3284,  977, 3804, 3581,
            ...
             678, 1354, 1649, 2588, 2857, 2158, 1529,  381,  279,  869],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,32.0s
70,70.0,70.0,70.0,70.0,70.0,70.0,70.0,70.0,70.0,0.0,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002BDE382B7F0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3326, 2425,  637, 3447,  157, 1464, 1762, 1488,  332, 3458,
            ...
            2319,  299,  556,  808, 2433, 2027, 1583, 3499,  800, 2600],
           dtype='int64', length=3427)","Int64Index([2608, 1641, 3164, 1784, 3268,  771, 3284,  977, 3804, 3581,
            ...
             678, 1354, 1649, 2588, 2857, 2158, 1529,  381,  279,  869],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,36.0s
71,71.0,71.0,71.0,71.0,71.0,71.0,71.0,71.0,71.0,0.0,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002BE01FBD5D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3326, 2425,  637, 3447,  157, 1464, 1762, 1488,  332, 3458,
            ...
            2319,  299,  556,  808, 2433, 2027, 1583, 3499,  800, 2600],
           dtype='int64', length=3427)","Int64Index([2608, 1641, 3164, 1784, 3268,  771, 3284,  977, 3804, 3581,
            ...
             678, 1354, 1649, 2588, 2857, 2158, 1529,  381,  279,  869],
           dtype='int64', length=381)",Accuracy,0.3018372654914856,36.0s
72,72.0,72.0,72.0,72.0,72.0,72.0,72.0,72.0,72.0,0.0,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002BE01E3BEE0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3326, 2425,  637, 3447,  157, 1464, 1762, 1488,  332, 3458,
            ...
            2319,  299,  556,  808, 2433, 2027, 1583, 3499,  800, 2600],
           dtype='int64', length=3427)","Int64Index([2608, 1641, 3164, 1784, 3268,  771, 3284,  977, 3804, 3581,
            ...
             678, 1354, 1649, 2588, 2857, 2158, 1529,  381,  279,  869],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,18.0s
73,73.0,73.0,73.0,73.0,73.0,73.0,73.0,73.0,73.0,0.0,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002BDE34FFF10>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3326, 2425,  637, 3447,  157, 1464, 1762, 1488,  332, 3458,
            ...
            2319,  299,  556,  808, 2433, 2027, 1583, 3499,  800, 2600],
           dtype='int64', length=3427)","Int64Index([2608, 1641, 3164, 1784, 3268,  771, 3284,  977, 3804, 3581,
            ...
             678, 1354, 1649, 2588, 2857, 2158, 1529,  381,  279,  869],
           dtype='int64', length=381)",Accuracy,0.4146981537342071,21.0s
74,74.0,74.0,74.0,74.0,74.0,74.0,74.0,74.0,0.0,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002331725BD30>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([  21,  142, 2928, 1687, 1515, 1426, 1380,  877, 1403, 3393,
            ...
             575, 2983, 3405, 3121, 2692,  608, 2011, 3642,  628,   70],
           dtype='int64', length=3427)","Int64Index([1240,  512, 3518, 1763, 3769, 2446, 1727,  200, 3230, 1459,
            ...
             634, 3629, 2179,  578, 2920, 3632, 1597, 1419, 2674, 2148],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,32.0s
75,75.0,75.0,75.0,75.0,75.0,75.0,75.0,75.0,0.0,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000023307F13790>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([  21,  142, 2928, 1687, 1515, 1426, 1380,  877, 1403, 3393,
            ...
             575, 2983, 3405, 3121, 2692,  608, 2011, 3642,  628,   70],
           dtype='int64', length=3427)","Int64Index([1240,  512, 3518, 1763, 3769, 2446, 1727,  200, 3230, 1459,
            ...
             634, 3629, 2179,  578, 2920, 3632, 1597, 1419, 2674, 2148],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,36.0s
76,76.0,76.0,76.0,76.0,76.0,76.0,76.0,76.0,0.0,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000023307F123B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([  21,  142, 2928, 1687, 1515, 1426, 1380,  877, 1403, 3393,
            ...
             575, 2983, 3405, 3121, 2692,  608, 2011, 3642,  628,   70],
           dtype='int64', length=3427)","Int64Index([1240,  512, 3518, 1763, 3769, 2446, 1727,  200, 3230, 1459,
            ...
             634, 3629, 2179,  578, 2920, 3632, 1597, 1419, 2674, 2148],
           dtype='int64', length=381)",Accuracy,0.278215229511261,35.0s
77,77.0,77.0,77.0,77.0,77.0,77.0,77.0,77.0,0.0,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000233171EA6E0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([  21,  142, 2928, 1687, 1515, 1426, 1380,  877, 1403, 3393,
            ...
             575, 2983, 3405, 3121, 2692,  608, 2011, 3642,  628,   70],
           dtype='int64', length=3427)","Int64Index([1240,  512, 3518, 1763, 3769, 2446, 1727,  200, 3230, 1459,
            ...
             634, 3629, 2179,  578, 2920, 3632, 1597, 1419, 2674, 2148],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,7.0s
78,78.0,78.0,78.0,78.0,78.0,78.0,78.0,78.0,0.0,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000234B947B010>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([  21,  142, 2928, 1687, 1515, 1426, 1380,  877, 1403, 3393,
            ...
             575, 2983, 3405, 3121, 2692,  608, 2011, 3642,  628,   70],
           dtype='int64', length=3427)","Int64Index([1240,  512, 3518, 1763, 3769, 2446, 1727,  200, 3230, 1459,
            ...
             634, 3629, 2179,  578, 2920, 3632, 1597, 1419, 2674, 2148],
           dtype='int64', length=381)",Accuracy,0.4199475049972534,14.0s
79,79.0,79.0,79.0,79.0,79.0,79.0,79.0,0.0,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000233431D4730>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([3408, 1029,  854, 1927, 3074, 2410,  363, 3033, 2340, 1223,
            ...
            2115, 2521,  620, 1845, 1695,  870,  272, 2310, 2955, 3696],
           dtype='int64', length=3427)","Int64Index([2557, 1883,  243,  676, 1292,  529, 1798, 1770, 3062,  710,
            ...
            1335, 2186,  657, 1332, 1797, 3735,   91, 1732, 1923, 3773],
           dtype='int64', length=381)",Accuracy,0.2703412175178528,47.0s
80,80.0,80.0,80.0,80.0,80.0,80.0,80.0,0.0,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000234A5ED46A0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3408, 1029,  854, 1927, 3074, 2410,  363, 3033, 2340, 1223,
            ...
            2115, 2521,  620, 1845, 1695,  870,  272, 2310, 2955, 3696],
           dtype='int64', length=3427)","Int64Index([2557, 1883,  243,  676, 1292,  529, 1798, 1770, 3062,  710,
            ...
            1335, 2186,  657, 1332, 1797, 3735,   91, 1732, 1923, 3773],
           dtype='int64', length=381)",Accuracy,0.2703412175178528,37.0s
81,81.0,81.0,81.0,81.0,81.0,81.0,81.0,0.0,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000233431F5630>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3408, 1029,  854, 1927, 3074, 2410,  363, 3033, 2340, 1223,
            ...
            2115, 2521,  620, 1845, 1695,  870,  272, 2310, 2955, 3696],
           dtype='int64', length=3427)","Int64Index([2557, 1883,  243,  676, 1292,  529, 1798, 1770, 3062,  710,
            ...
            1335, 2186,  657, 1332, 1797, 3735,   91, 1732, 1923, 3773],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,37.0s
82,82.0,82.0,82.0,82.0,82.0,82.0,82.0,0.0,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000233434FF970>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3408, 1029,  854, 1927, 3074, 2410,  363, 3033, 2340, 1223,
            ...
            2115, 2521,  620, 1845, 1695,  870,  272, 2310, 2955, 3696],
           dtype='int64', length=3427)","Int64Index([2557, 1883,  243,  676, 1292,  529, 1798, 1770, 3062,  710,
            ...
            1335, 2186,  657, 1332, 1797, 3735,   91, 1732, 1923, 3773],
           dtype='int64', length=381)",Accuracy,0.2703412175178528,21.0s
83,83.0,83.0,83.0,83.0,83.0,83.0,83.0,0.0,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000234AEC03C70>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3408, 1029,  854, 1927, 3074, 2410,  363, 3033, 2340, 1223,
            ...
            2115, 2521,  620, 1845, 1695,  870,  272, 2310, 2955, 3696],
           dtype='int64', length=3427)","Int64Index([2557, 1883,  243,  676, 1292,  529, 1798, 1770, 3062,  710,
            ...
            1335, 2186,  657, 1332, 1797, 3735,   91, 1732, 1923, 3773],
           dtype='int64', length=381)",Accuracy,0.3963254690170288,17.0s
84,84.0,84.0,84.0,84.0,84.0,84.0,0.0,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000010A1630A9E0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([3702, 1168, 3004, 1775, 1753, 1174, 2547, 3457, 1659, 3239,
            ...
            2890, 3138, 1114,  151, 1689,   96, 1321, 1368,   41,  465],
           dtype='int64', length=3427)","Int64Index([ 537,  606, 3642, 3771,  866,  373,  185, 3246,  676, 1456,
            ...
            2703, 1565, 2735, 2582, 2045,  632,  531, 1514, 3665, 2250],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,32.0s
85,85.0,85.0,85.0,85.0,85.0,85.0,0.0,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000010A162A0520>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3702, 1168, 3004, 1775, 1753, 1174, 2547, 3457, 1659, 3239,
            ...
            2890, 3138, 1114,  151, 1689,   96, 1321, 1368,   41,  465],
           dtype='int64', length=3427)","Int64Index([ 537,  606, 3642, 3771,  866,  373,  185, 3246,  676, 1456,
            ...
            2703, 1565, 2735, 2582, 2045,  632,  531, 1514, 3665, 2250],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,36.0s
86,86.0,86.0,86.0,86.0,86.0,86.0,0.0,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000010A160E3160>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3702, 1168, 3004, 1775, 1753, 1174, 2547, 3457, 1659, 3239,
            ...
            2890, 3138, 1114,  151, 1689,   96, 1321, 1368,   41,  465],
           dtype='int64', length=3427)","Int64Index([ 537,  606, 3642, 3771,  866,  373,  185, 3246,  676, 1456,
            ...
            2703, 1565, 2735, 2582, 2045,  632,  531, 1514, 3665, 2250],
           dtype='int64', length=381)",Accuracy,0.3280839920043945,36.0s
87,87.0,87.0,87.0,87.0,87.0,87.0,0.0,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000010A1600E0B0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3702, 1168, 3004, 1775, 1753, 1174, 2547, 3457, 1659, 3239,
            ...
            2890, 3138, 1114,  151, 1689,   96, 1321, 1368,   41,  465],
           dtype='int64', length=3427)","Int64Index([ 537,  606, 3642, 3771,  866,  373,  185, 3246,  676, 1456,
            ...
            2703, 1565, 2735, 2582, 2045,  632,  531, 1514, 3665, 2250],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,18.0s
88,88.0,88.0,88.0,88.0,88.0,88.0,0.0,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000010BBAAF4910>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3702, 1168, 3004, 1775, 1753, 1174, 2547, 3457, 1659, 3239,
            ...
            2890, 3138, 1114,  151, 1689,   96, 1321, 1368,   41,  465],
           dtype='int64', length=3427)","Int64Index([ 537,  606, 3642, 3771,  866,  373,  185, 3246,  676, 1456,
            ...
            2703, 1565, 2735, 2582, 2045,  632,  531, 1514, 3665, 2250],
           dtype='int64', length=381)",Accuracy,0.3543307185173034,15.0s
89,89.0,89.0,89.0,89.0,89.0,0.0,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F7188F25C0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([ 891,  457,  871, 2215, 2983, 3437, 3626, 3536, 2396,  740,
            ...
            1756,  107, 3568, 3722, 2513,  827,  520, 1002, 3508,  148],
           dtype='int64', length=3427)","Int64Index([2814, 2965, 3264,  106, 2210,   50, 3257, 1510, 3299,  522,
            ...
            1502, 2562, 1288, 1332, 2878,  571, 1239, 1677,  241, 1416],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,38.0s
90,90.0,90.0,90.0,90.0,90.0,0.0,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F71888AEC0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 891,  457,  871, 2215, 2983, 3437, 3626, 3536, 2396,  740,
            ...
            1756,  107, 3568, 3722, 2513,  827,  520, 1002, 3508,  148],
           dtype='int64', length=3427)","Int64Index([2814, 2965, 3264,  106, 2210,   50, 3257, 1510, 3299,  522,
            ...
            1502, 2562, 1288, 1332, 2878,  571, 1239, 1677,  241, 1416],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,37.0s
91,91.0,91.0,91.0,91.0,91.0,0.0,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F718888FA0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 891,  457,  871, 2215, 2983, 3437, 3626, 3536, 2396,  740,
            ...
            1756,  107, 3568, 3722, 2513,  827,  520, 1002, 3508,  148],
           dtype='int64', length=3427)","Int64Index([2814, 2965, 3264,  106, 2210,   50, 3257, 1510, 3299,  522,
            ...
            1502, 2562, 1288, 1332, 2878,  571, 1239, 1677,  241, 1416],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,36.0s
92,92.0,92.0,92.0,92.0,92.0,0.0,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F718593100>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 891,  457,  871, 2215, 2983, 3437, 3626, 3536, 2396,  740,
            ...
            1756,  107, 3568, 3722, 2513,  827,  520, 1002, 3508,  148],
           dtype='int64', length=3427)","Int64Index([2814, 2965, 3264,  106, 2210,   50, 3257, 1510, 3299,  522,
            ...
            1502, 2562, 1288, 1332, 2878,  571, 1239, 1677,  241, 1416],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,22.0s
93,93.0,93.0,93.0,93.0,93.0,0.0,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F7184035E0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 891,  457,  871, 2215, 2983, 3437, 3626, 3536, 2396,  740,
            ...
            1756,  107, 3568, 3722, 2513,  827,  520, 1002, 3508,  148],
           dtype='int64', length=3427)","Int64Index([2814, 2965, 3264,  106, 2210,   50, 3257, 1510, 3299,  522,
            ...
            1502, 2562, 1288, 1332, 2878,  571, 1239, 1677,  241, 1416],
           dtype='int64', length=381)",Accuracy,0.404199481010437,20.0s
94,94.0,94.0,94.0,94.0,0.0,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FA05581690>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([1796, 1318, 2621, 1622, 3390, 3577, 2924,  624, 2586,  268,
            ...
            1100, 3642, 2079, 2395, 2642,  495, 2669, 3176, 1984,  130],
           dtype='int64', length=3427)","Int64Index([3759, 2849, 1178, 2667, 2381,  788,  586,  950, 1523, 3537,
            ...
             696,  647, 1002,  738,  925,  247,  455, 1101, 2719,  765],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,51.0s
95,95.0,95.0,95.0,95.0,0.0,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FA03EC8910>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1796, 1318, 2621, 1622, 3390, 3577, 2924,  624, 2586,  268,
            ...
            1100, 3642, 2079, 2395, 2642,  495, 2669, 3176, 1984,  130],
           dtype='int64', length=3427)","Int64Index([3759, 2849, 1178, 2667, 2381,  788,  586,  950, 1523, 3537,
            ...
             696,  647, 1002,  738,  925,  247,  455, 1101, 2719,  765],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,57.0s
96,96.0,96.0,96.0,96.0,0.0,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F8A8DC0EE0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1796, 1318, 2621, 1622, 3390, 3577, 2924,  624, 2586,  268,
            ...
            1100, 3642, 2079, 2395, 2642,  495, 2669, 3176, 1984,  130],
           dtype='int64', length=3427)","Int64Index([3759, 2849, 1178, 2667, 2381,  788,  586,  950, 1523, 3537,
            ...
             696,  647, 1002,  738,  925,  247,  455, 1101, 2719,  765],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,58.0s
97,97.0,97.0,97.0,97.0,0.0,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F7448E1C60>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([1796, 1318, 2621, 1622, 3390, 3577, 2924,  624, 2586,  268,
            ...
            1100, 3642, 2079, 2395, 2642,  495, 2669, 3176, 1984,  130],
           dtype='int64', length=3427)","Int64Index([3759, 2849, 1178, 2667, 2381,  788,  586,  950, 1523, 3537,
            ...
             696,  647, 1002,  738,  925,  247,  455, 1101, 2719,  765],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,29.0s
98,98.0,98.0,98.0,98.0,0.0,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F8B90DF910>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([1796, 1318, 2621, 1622, 3390, 3577, 2924,  624, 2586,  268,
            ...
            1100, 3642, 2079, 2395, 2642,  495, 2669, 3176, 1984,  130],
           dtype='int64', length=3427)","Int64Index([3759, 2849, 1178, 2667, 2381,  788,  586,  950, 1523, 3537,
            ...
             696,  647, 1002,  738,  925,  247,  455, 1101, 2719,  765],
           dtype='int64', length=381)",Accuracy,0.3727034032344818,35.0s
99,99.0,99.0,99.0,0.0,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F744074280>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([2407, 3719, 1139,   58, 3791, 1609,    9,  725, 3461, 3713,
            ...
            1882,  155,  895, 2473, 2996, 3796, 3496, 2845, 1067, 2519],
           dtype='int64', length=3427)","Int64Index([1106, 2558, 3487, 1908, 3049, 1419, 2615, 2281, 3785, 2645,
            ...
            3733, 1120, 2017, 3333, 2402, 2441, 3179,  997, 3763, 1250],
           dtype='int64', length=381)",Accuracy,0.3674540817737579,50.0s
100,100.0,100.0,100.0,0.0,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F7098446D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2407, 3719, 1139,   58, 3791, 1609,    9,  725, 3461, 3713,
            ...
            1882,  155,  895, 2473, 2996, 3796, 3496, 2845, 1067, 2519],
           dtype='int64', length=3427)","Int64Index([1106, 2558, 3487, 1908, 3049, 1419, 2615, 2281, 3785, 2645,
            ...
            3733, 1120, 2017, 3333, 2402, 2441, 3179,  997, 3763, 1250],
           dtype='int64', length=381)",Accuracy,0.3674540817737579,58.0s
101,101.0,101.0,101.0,0.0,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F7097F4370>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2407, 3719, 1139,   58, 3791, 1609,    9,  725, 3461, 3713,
            ...
            1882,  155,  895, 2473, 2996, 3796, 3496, 2845, 1067, 2519],
           dtype='int64', length=3427)","Int64Index([1106, 2558, 3487, 1908, 3049, 1419, 2615, 2281, 3785, 2645,
            ...
            3733, 1120, 2017, 3333, 2402, 2441, 3179,  997, 3763, 1250],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,57.0s
102,102.0,102.0,102.0,0.0,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FA0BCF9F00>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2407, 3719, 1139,   58, 3791, 1609,    9,  725, 3461, 3713,
            ...
            1882,  155,  895, 2473, 2996, 3796, 3496, 2845, 1067, 2519],
           dtype='int64', length=3427)","Int64Index([1106, 2558, 3487, 1908, 3049, 1419, 2615, 2281, 3785, 2645,
            ...
            3733, 1120, 2017, 3333, 2402, 2441, 3179,  997, 3763, 1250],
           dtype='int64', length=381)",Accuracy,0.3674540817737579,20.0s
103,103.0,103.0,103.0,0.0,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F8B91C5750>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2407, 3719, 1139,   58, 3791, 1609,    9,  725, 3461, 3713,
            ...
            1882,  155,  895, 2473, 2996, 3796, 3496, 2845, 1067, 2519],
           dtype='int64', length=3427)","Int64Index([1106, 2558, 3487, 1908, 3049, 1419, 2615, 2281, 3785, 2645,
            ...
            3733, 1120, 2017, 3333, 2402, 2441, 3179,  997, 3763, 1250],
           dtype='int64', length=381)",Accuracy,0.4146981537342071,27.0s
104,104.0,104.0,0.0,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F8A52706D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([3073, 3012, 1421, 1566, 3250, 3451, 2098, 3743, 2069,  478,
            ...
             686,  497, 3786, 3050, 1390,  128, 2295,  673, 2442, 1832],
           dtype='int64', length=3427)","Int64Index([1555, 2708, 3431, 2777, 1305, 1528, 1207,  177,  216, 1963,
            ...
            1009,  980, 3414, 1109, 1102, 3307, 3759, 1796, 2385, 3783],
           dtype='int64', length=381)",Accuracy,0.2729658782482147,52.0s
105,105.0,105.0,0.0,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F73D7930D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3073, 3012, 1421, 1566, 3250, 3451, 2098, 3743, 2069,  478,
            ...
             686,  497, 3786, 3050, 1390,  128, 2295,  673, 2442, 1832],
           dtype='int64', length=3427)","Int64Index([1555, 2708, 3431, 2777, 1305, 1528, 1207,  177,  216, 1963,
            ...
            1009,  980, 3414, 1109, 1102, 3307, 3759, 1796, 2385, 3783],
           dtype='int64', length=381)",Accuracy,0.2729658782482147,59.0s
106,106.0,106.0,0.0,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F73D7931C0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3073, 3012, 1421, 1566, 3250, 3451, 2098, 3743, 2069,  478,
            ...
             686,  497, 3786, 3050, 1390,  128, 2295,  673, 2442, 1832],
           dtype='int64', length=3427)","Int64Index([1555, 2708, 3431, 2777, 1305, 1528, 1207,  177,  216, 1963,
            ...
            1009,  980, 3414, 1109, 1102, 3307, 3759, 1796, 2385, 3783],
           dtype='int64', length=381)",Accuracy,0.2650918662548065,61.0s
107,107.0,107.0,0.0,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001F74150FDC0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3073, 3012, 1421, 1566, 3250, 3451, 2098, 3743, 2069,  478,
            ...
             686,  497, 3786, 3050, 1390,  128, 2295,  673, 2442, 1832],
           dtype='int64', length=3427)","Int64Index([1555, 2708, 3431, 2777, 1305, 1528, 1207,  177,  216, 1963,
            ...
            1009,  980, 3414, 1109, 1102, 3307, 3759, 1796, 2385, 3783],
           dtype='int64', length=381)",Accuracy,0.2729658782482147,20.0s
108,108.0,108.0,0.0,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000001FA0B709600>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3073, 3012, 1421, 1566, 3250, 3451, 2098, 3743, 2069,  478,
            ...
             686,  497, 3786, 3050, 1390,  128, 2295,  673, 2442, 1832],
           dtype='int64', length=3427)","Int64Index([1555, 2708, 3431, 2777, 1305, 1528, 1207,  177,  216, 1963,
            ...
            1009,  980, 3414, 1109, 1102, 3307, 3759, 1796, 2385, 3783],
           dtype='int64', length=381)",Accuracy,0.4094488322734833,31.0s
109,109.0,0.0,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000221ADA67550>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([3520, 2128, 3225, 3094, 2773, 3742, 3530,  558, 2991,  693,
            ...
             956, 3138, 1376,  870,  324, 2694,  229, 1454, 3147,  231],
           dtype='int64', length=3427)","Int64Index([1377, 1305, 2377, 2779, 3648, 2440,  998, 1340,  781, 1579,
            ...
            2555, 1802, 3528, 2802, 2961, 3278, 1981, 3442, 2003, 2485],
           dtype='int64', length=381)",Accuracy,0.2755905389785766,50.0s
110,110.0,0.0,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000221A77DCA30>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3520, 2128, 3225, 3094, 2773, 3742, 3530,  558, 2991,  693,
            ...
             956, 3138, 1376,  870,  324, 2694,  229, 1454, 3147,  231],
           dtype='int64', length=3427)","Int64Index([1377, 1305, 2377, 2779, 3648, 2440,  998, 1340,  781, 1579,
            ...
            2555, 1802, 3528, 2802, 2961, 3278, 1981, 3442, 2003, 2485],
           dtype='int64', length=381)",Accuracy,0.2755905389785766,57.0s
111,111.0,0.0,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000222A3D61780>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3520, 2128, 3225, 3094, 2773, 3742, 3530,  558, 2991,  693,
            ...
             956, 3138, 1376,  870,  324, 2694,  229, 1454, 3147,  231],
           dtype='int64', length=3427)","Int64Index([1377, 1305, 2377, 2779, 3648, 2440,  998, 1340,  781, 1579,
            ...
            2555, 1802, 3528, 2802, 2961, 3278, 1981, 3442, 2003, 2485],
           dtype='int64', length=381)",Accuracy,0.3254593312740326,57.0s
112,112.0,0.0,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000221ACA5E1D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([3520, 2128, 3225, 3094, 2773, 3742, 3530,  558, 2991,  693,
            ...
             956, 3138, 1376,  870,  324, 2694,  229, 1454, 3147,  231],
           dtype='int64', length=3427)","Int64Index([1377, 1305, 2377, 2779, 3648, 2440,  998, 1340,  781, 1579,
            ...
            2555, 1802, 3528, 2802, 2961, 3278, 1981, 3442, 2003, 2485],
           dtype='int64', length=381)",Accuracy,0.2755905389785766,22.0s
113,113.0,0.0,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000221A78EDC00>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([3520, 2128, 3225, 3094, 2773, 3742, 3530,  558, 2991,  693,
            ...
             956, 3138, 1376,  870,  324, 2694,  229, 1454, 3147,  231],
           dtype='int64', length=3427)","Int64Index([1377, 1305, 2377, 2779, 3648, 2440,  998, 1340,  781, 1579,
            ...
            2555, 1802, 3528, 2802, 2961, 3278, 1981, 3442, 2003, 2485],
           dtype='int64', length=381)",Accuracy,0.3622047305107116,126.0s
114,0.0,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000022007849B40>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([ 632,  911, 1424, 2057, 3531, 3212, 1839,  160, 1509,  725,
            ...
            2718, 1232, 1242, 2407, 2243, 2916, 3605, 3573,  600, 3619],
           dtype='int64', length=3427)","Int64Index([3405, 1814,  320, 2248, 1358,  533,   39, 2257, 3495, 2847,
            ...
            2002, 2363, 2798,  829, 3146, 2259, 3333,  707, 2962,  832],
           dtype='int64', length=381)",Accuracy,0.3228346407413482,51.0s
115,0.0,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000221A7936EF0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 632,  911, 1424, 2057, 3531, 3212, 1839,  160, 1509,  725,
            ...
            2718, 1232, 1242, 2407, 2243, 2916, 3605, 3573,  600, 3619],
           dtype='int64', length=3427)","Int64Index([3405, 1814,  320, 2248, 1358,  533,   39, 2257, 3495, 2847,
            ...
            2002, 2363, 2798,  829, 3146, 2259, 3333,  707, 2962,  832],
           dtype='int64', length=381)",Accuracy,0.3228346407413482,57.0s
116,0.0,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000022007848AC0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 632,  911, 1424, 2057, 3531, 3212, 1839,  160, 1509,  725,
            ...
            2718, 1232, 1242, 2407, 2243, 2916, 3605, 3573,  600, 3619],
           dtype='int64', length=3427)","Int64Index([3405, 1814,  320, 2248, 1358,  533,   39, 2257, 3495, 2847,
            ...
            2002, 2363, 2798,  829, 3146, 2259, 3333,  707, 2962,  832],
           dtype='int64', length=381)",Accuracy,0.2887139022350311,57.0s
117,0.0,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x0000022008147E80>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([ 632,  911, 1424, 2057, 3531, 3212, 1839,  160, 1509,  725,
            ...
            2718, 1232, 1242, 2407, 2243, 2916, 3605, 3573,  600, 3619],
           dtype='int64', length=3427)","Int64Index([3405, 1814,  320, 2248, 1358,  533,   39, 2257, 3495, 2847,
            ...
            2002, 2363, 2798,  829, 3146, 2259, 3333,  707, 2962,  832],
           dtype='int64', length=381)",Accuracy,0.3228346407413482,15.0s
118,0.0,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x00000220078492D0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([ 632,  911, 1424, 2057, 3531, 3212, 1839,  160, 1509,  725,
            ...
            2718, 1232, 1242, 2407, 2243, 2916, 3605, 3573,  600, 3619],
           dtype='int64', length=3427)","Int64Index([3405, 1814,  320, 2248, 1358,  533,   39, 2257, 3495, 2847,
            ...
            2002, 2363, 2798,  829, 3146, 2259, 3333,  707, 2962,  832],
           dtype='int64', length=381)",Accuracy,0.3044619560241699,21.0s
0,,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002CB170F6F20>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn = Sequential() model_cnn.add(Conv2D(64, kernel_size=(5, 5), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn.add(Conv2D(128, kernel_size=(5, 5), activation='relu', name='conv2d_2')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn.add(Dropout(0.25, name='dropout_1')) model_cnn.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn.add(Dropout(0.25, name='dropout_2')) model_cnn.add(Flatten(name='flatten')) model_cnn.add(Dense(256, activation='relu', name='dense')) model_cnn.add(Dense(num_classes, activation='softmax', name='output')) model_cnn.compile(loss=losses.categorical_crossentropy,optimizer=optimizers.Adadelta(),metrics=['accuracy'])",relu,"Int64Index([2154,  206,  705, 3592, 2878, 1538,  302, 3694, 2746,    0,
            ...
            1974, 2995,  781, 3083, 1286,  271,  878, 1316, 3076, 3085],
           dtype='int64', length=3427)","Int64Index([ 898, 3634, 3328, 3288,  346,  541,  148, 2325, 1527, 2697,
            ...
            3110,  210, 1883,  849, 1787, 2727, 2152, 1357,  463,  482],
           dtype='int64', length=381)",Accuracy,0.28871390223503113,39.0s
0,,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002CAE8B8DDE0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.25, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.25, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2154,  206,  705, 3592, 2878, 1538,  302, 3694, 2746,    0,
            ...
            1974, 2995,  781, 3083, 1286,  271,  878, 1316, 3076, 3085],
           dtype='int64', length=3427)","Int64Index([ 898, 3634, 3328, 3288,  346,  541,  148, 2325, 1527, 2697,
            ...
            3110,  210, 1883,  849, 1787, 2727, 2152, 1357,  463,  482],
           dtype='int64', length=381)",Accuracy,0.28871390223503113,38.0s
0,,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002CB083CFAF0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn3 = Sequential() model_cnn3.add(Rescaling(1./255, input_shape=input_shape)) model_cnn3.add(Conv2D(16, kernel_size=10, activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn3.add(Conv2D(32, kernel_size=8, activation='relu', name='conv2d_2')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_1')) model_cnn3.add(Dropout(0.25, name='dropout_1')) model_cnn3.add(Conv2D(32, kernel_size=6, activation='relu', name='conv2d_3')) model_cnn3.add(MaxPooling2D(pool_size=2, name='max_pool_2')) model_cnn3.add(Dropout(0.25, name='dropout_2')) model_cnn3.add(Flatten(name='flatten')) model_cnn3.add(Dense(50, activation='relu', name='dense')) model_cnn3.add(Dense(num_classes, activation='softmax', name='output')) model_cnn3.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2154,  206,  705, 3592, 2878, 1538,  302, 3694, 2746,    0,
            ...
            1974, 2995,  781, 3083, 1286,  271,  878, 1316, 3076, 3085],
           dtype='int64', length=3427)","Int64Index([ 898, 3634, 3328, 3288,  346,  541,  148, 2325, 1527, 2697,
            ...
            3110,  210, 1883,  849, 1787, 2727, 2152, 1357,  463,  482],
           dtype='int64', length=381)",Accuracy,0.254593163728714,37.0s
0,,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002CB084CADA0>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","model_cnn2 = Sequential() model_cnn2.add(Conv2D(64, kernel_size=(3, 3), activation='relu', input_shape=input_shape, name='conv2d_1')) model_cnn2.add(Conv2D(128, kernel_size=(3, 3), activation='relu', name='conv2d_2')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_1')) model_cnn2.add(Dropout(0.5, name='dropout_1')) model_cnn2.add(Conv2D(256, kernel_size=(3, 3), activation='relu', name='conv2d_3')) model_cnn2.add(MaxPooling2D(pool_size=(2, 2), name='max_pool_2')) model_cnn2.add(Dropout(0.5, name='dropout_2')) model_cnn2.add(Flatten(name='flatten')) model_cnn2.add(Dense(256, activation='relu', name='dense')) model_cnn2.add(Dense(num_classes, activation='softmax', name='output')) model_cnn2.compile(loss=losses.categorical_crossentropy, optimizer=optimizers.Adadelta(), metrics=['accuracy'])",relu,"Int64Index([2154,  206,  705, 3592, 2878, 1538,  302, 3694, 2746,    0,
            ...
            1974, 2995,  781, 3083, 1286,  271,  878, 1316, 3076, 3085],
           dtype='int64', length=3427)","Int64Index([ 898, 3634, 3328, 3288,  346,  541,  148, 2325, 1527, 2697,
            ...
            3110,  210, 1883,  849, 1787, 2727, 2152, 1357,  463,  482],
           dtype='int64', length=381)",Accuracy,0.28871390223503113,12.0s
0,,,,,,,,,,,,,,,,,,,<keras.engine.sequential.Sequential object at 0x000002CB083CD330>,"mirroring, whitening(alpha=1,beta=10), contrast, equalizing, débruitage, redimensionnement(100*100)","cnn5 = Sequential() cnn5.add(Rescaling(1./255, input_shape=input_shape)) cnn5.add(Conv2D(16, kernel_size=10, activation='relu')) cnn5.add(MaxPooling2D(3)) cnn5.add(Conv2D(32, kernel_size=8, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Conv2D(32, kernel_size=6, activation='relu')) cnn5.add(MaxPooling2D(2)) cnn5.add(Flatten()) cnn5.add(Dense(50, activation='relu')) cnn5.add(Dense(20, activation='relu')) cnn5.add(Dense(5, activation='softmax')) cnn5.compile(optimizer='adam',loss='categorical_crossentropy',metrics=['accuracy'],)",relu,"Int64Index([2154,  206,  705, 3592, 2878, 1538,  302, 3694, 2746,    0,
            ...
            1974, 2995,  781, 3083, 1286,  271,  878, 1316, 3076, 3085],
           dtype='int64', length=3427)","Int64Index([ 898, 3634, 3328, 3288,  346,  541,  148, 2325, 1527, 2697,
            ...
            3110,  210, 1883,  849, 1787, 2727, 2152, 1357,  463,  482],
           dtype='int64', length=381)",Accuracy,0.3648293912410736,12.0s
